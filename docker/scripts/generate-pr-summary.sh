#!/bin/bash
# scripts/generate-pr-summary.sh

set -e

# Áí∞Â¢ÉÂ§âÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "Error: ANTHROPIC_API_KEY is not set"
    exit 1
fi

echo "# Testing Anthropic API key..."
# API„Ç≠„Éº„ÅÆÊúÄÂàù„ÅÆ10ÊñáÂ≠ó„Å®ÊúÄÂæå„ÅÆ4ÊñáÂ≠ó„ÇíË°®Á§∫Ôºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÅÆ„Åü„ÇÅÔºâ
echo "API Key format: ${ANTHROPIC_API_KEY:0:10}...${ANTHROPIC_API_KEY: -4}"

# API„Ç≠„Éº„ÅÆÁ∞°Âçò„Å™„ÉÜ„Çπ„Éà
API_TEST=$(curl -s -X POST https://api.anthropic.com/v1/messages \
  -H "Content-Type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -d '{"model": "claude-3-5-sonnet-20241022", "max_tokens": 10, "messages": [{"role": "user", "content": "test"}]}' \
  | jq -r '.type' 2>/dev/null)

if [ "$API_TEST" = "error" ]; then
    echo "Warning: Anthropic API key appears to be invalid"
elif [ "$API_TEST" = "message" ]; then
    echo "Success: Anthropic API key is valid"
else
    echo "Unknown API response: $API_TEST"
fi

# GitHub„Éà„Éº„ÇØ„É≥„ÅÆÁ¢∫Ë™çÔºàË§áÊï∞„ÅÆÂèØËÉΩÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºâ
if [ -n "$GITHUB_TOKEN" ]; then
    echo "Using GITHUB_TOKEN"
elif [ -n "$CIRCLE_TOKEN" ]; then
    echo "Using CIRCLE_TOKEN as GITHUB_TOKEN"
    GITHUB_TOKEN="$CIRCLE_TOKEN"
elif [ -n "$GH_TOKEN" ]; then
    echo "Using GH_TOKEN as GITHUB_TOKEN"
    GITHUB_TOKEN="$GH_TOKEN"
else
    echo "Error: No GitHub token found (GITHUB_TOKEN, CIRCLE_TOKEN, or GH_TOKEN)"
    exit 1
fi

# PRÊÉÖÂ†±„ÇíÂèñÂæó
if [ -z "$CIRCLE_PULL_REQUEST" ]; then
    echo "No PR URL found, skipping PR summary generation"
    exit 0
fi

# CIRCLE_PULL_REQUEST„Åã„ÇâPRÁï™Âè∑„ÇíÊäΩÂá∫
# ‰æã: https://github.com/otajisan/automated-code-review-on-circleci/pull/2 -> 2
PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's|.*/pull/||')

if [ -z "$PR_NUMBER" ] || ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
    echo "Failed to extract valid PR number from: $CIRCLE_PULL_REQUEST"
    exit 1
fi

echo "# Generating summary for PR #${PR_NUMBER}"

# git diff„ÅßÂ§âÊõ¥ÂÜÖÂÆπ„ÇíÂèñÂæó
DIFF_OUTPUT=$(git diff origin/main...HEAD)

echo "# Diff Output:"
echo "$DIFF_OUTPUT"

# Claude Code„Åß„Çµ„Éû„É™„ÇíÁîüÊàê
PROMPT="‰ª•‰∏ã„ÅÆ„Ç≥„Éº„ÉâÂ§âÊõ¥„ÇíÂàÜÊûê„Åó„Å¶„ÄÅÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÊó•Êú¨Ë™û„ÅßPR„Çµ„Éû„É™„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

Â§âÊõ¥ÂÜÖÂÆπÔºö
${DIFF_OUTPUT}

‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
## Â§âÊõ¥Ê¶ÇË¶Å
## ‰∏ª„Å™Â§âÊõ¥ÁÇπ
## ÂΩ±ÈüøÁØÑÂõ≤
## Ê≥®ÊÑè‰∫ãÈ†ÖÔºà„ÅÇ„Çå„Å∞Ôºâ"

echo '# Checking claude command...'
echo "Debug: About to run claude command"
echo "ANTHROPIC_API_KEY is set: $([ -n "$ANTHROPIC_API_KEY" ] && echo "yes" || echo "no")"
echo "Current user: $(whoami)"
echo "Current directory: $(pwd)"
echo "Claude command path: $(which claude)"
echo "Claude version: $(claude --version 2>&1 || echo "version check failed")"

echo '# Creating PR summary with Claude...'

# Claude Code„ÇíÂÆüË°å„Åó„Å¶„Çµ„Éû„É™ÁîüÊàê
echo '# Running claude command with CI environment...'
export CI=true
export NODE_ENV=production

# ÈùûÂØæË©±ÁöÑÁí∞Â¢É„ÅßClaude CLI„Çí‰ΩøÁî®
echo "# Using Claude CLI with stdin input..."

# Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶ÈùûÂØæË©±ÁöÑ„É¢„Éº„Éâ„Å´„Åô„Çã
export CLAUDE_NO_INTERACTIVE=true
export CLAUDE_NO_TUI=true

# Ê®ôÊ∫ñÂÖ•ÂäõÁµåÁî±„Åß„Éó„É≠„É≥„Éó„Éà„ÇíÊ∏°„Åô
SUMMARY=$(echo "$PROMPT" | timeout 30 claude 2>/dev/null || echo "Claude CLI„ÅÆÂÆüË°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÊâãÂãï„Åß„É¨„Éì„É•„Éº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

echo '# Saving PR summary to /tmp/pr_summary.json'

# jq„Çí‰Ωø„Å£„Å¶Ê≠£„Åó„ÅÑJSON„ÇíÁîüÊàê
COMMENT_BODY="ü§ñ **Ëá™ÂãïÁîüÊàê„Åï„Çå„ÅüPR„Çµ„Éû„É™**

${SUMMARY}"

echo "$COMMENT_BODY" | jq -Rs '{"body": .}' > /tmp/pr_summary.json

echo "# Generated PR Summary:"
cat /tmp/pr_summary.json

echo "# Checking GitHub API credentials..."
echo "GITHUB_TOKEN is set: $([ -n "$GITHUB_TOKEN" ] && echo "yes" || echo "no")"
echo "CIRCLE_PROJECT_USERNAME: $CIRCLE_PROJECT_USERNAME"
echo "CIRCLE_PROJECT_REPONAME: $CIRCLE_PROJECT_REPONAME"

echo "# Posting summary to PR #${PR_NUMBER}"
# GitHub API„ÅßPR„Å´„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®øÔºà„Éï„Ç°„Ç§„É´„Åã„ÇâË™≠„ÅøËæº„ÅøÔºâ
GITHUB_RESPONSE=$(curl -s -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  -H "Content-Type: application/json" \
  "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${PR_NUMBER}/comments" \
  -d @/tmp/pr_summary.json)

echo "# GitHub API Response:"
echo "$GITHUB_RESPONSE"

echo "# PR summary generated and posted successfully!"
